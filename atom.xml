<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>anemone</title>
    <subtitle>A minimalist Zola theme that prioritizes clean CSS and avoids heavy JavaScript. Enjoy a seamless user experience with lightning-fast load times. Let your content take center stage in a clutter-free, elegant design that enhances readability. Responsive and efficient, anemone brings focus to your ideas.</subtitle>
    <link href="https://anemone.pages.dev/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://anemone.pages.dev"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-06-20T00:00:00+00:00</updated>
    <id>https://anemone.pages.dev/atom.xml</id>
    <entry xml:lang="en">
        <title>Personal journal</title>
        <published>2024-06-20T00:00:00+00:00</published>
        <updated>2024-06-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://anemone.pages.dev/journal/" type="text/html"/>
        <id>https://anemone.pages.dev/journal/</id>
        
        <content type="html">&lt;h2 id=&quot;2024-06-20-blog-is-live-wrench&quot;&gt;2024-06-20 - Blog is live! üîß&lt;&#x2F;h2&gt;
&lt;p&gt;I have been wanting to try blogging for several years now and finally took the time to do some research on the subject. For now I‚Äôve settled on a markdown-based static site generator called Zola, featuring the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Speyll&#x2F;anemone&quot;&gt;anemone&lt;&#x2F;a&gt; theme. I plan to use this blog to document some of my hobby projects. Some of my interests you can expect to hear about are programming, computer graphics, and maybe some music.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Automating Dungeons and Diagrams Part 1: Screen Interaction</title>
        <published>2024-06-18T00:00:00+00:00</published>
        <updated>2024-06-18T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://anemone.pages.dev/blog/dnd-pt1/" type="text/html"/>
        <id>https://anemone.pages.dev/blog/dnd-pt1/</id>
        
        <content type="html">&lt;h1 id=&quot;introduction&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;dnd-pt1&#x2F;#introduction&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Dungeons and Diagrams (henceforth referred to as DnD) is a minigame in Last Call BBS, the (unfortunately) final puzzle game released by Zachtronics before closing their studio to pursue other ventures. DnD is a logic game where the objective is to fill out an 8x8 grid with walls such that it forms a single contiguous open region along with a few other simple constraints. The game includes 63 curated puzzles of increasing difficulty for the player to solve, as well as an ‚Äúinfinite‚Äù mode that has 100 million randomly seeded puzzles of varying difficulty.&lt;&#x2F;p&gt;
&lt;div class=&quot;textCenter&quot; &gt;
  &lt;img src=&quot;..&amp;#x2F;..&amp;#x2F;assets&amp;#x2F;dnd&amp;#x2F;game.png&quot; alt=&quot;Last Call BBS screenshot&quot; &gt;
  
&lt;&#x2F;div&gt;
&lt;p&gt;With some effort (the difficulty gets very high!) I manually solved the 63 curated puzzles, and approximately 170 of the seeded puzzles. As an avid Factorio enjoyer, I couldn‚Äôt help imagining how fun it would be to automate this game watch it play itself. I am writing this blog series to scratch that itch, as well as to provide something of a reference for anyone else who‚Äôs interested in game automation. There‚Äôs a lot to cover so I will split it into a few separate posts, and I‚Äôll try to keep it interesting with lots of images. This post will cover the setup required to programmatically view pixels from the game and perform mouse and keyboard input.&lt;&#x2F;p&gt;
&lt;p&gt;I am writing my solver in Rust, running on Ubuntu 24.04. If you are on Windows or Mac, worry not, as I hope to make my implementation as platform-agnostic as possible.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;objectives&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;dnd-pt1&#x2F;#objectives&quot;&gt;Objectives&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Before we get into the weeds, I‚Äôd like to set out my objectives for both this and subsequent posts. In this post, I would like to produce a program which can achieve the following:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Find a window on the deskop given it‚Äôs title, in this case ‚ÄúLast Call BBS‚Äù.&lt;&#x2F;li&gt;
&lt;li&gt;Capture the framebuffer for that window, and peek into the pixel values.&lt;&#x2F;li&gt;
&lt;li&gt;Move the mouse to specific coordinates, and perform mouse input (left and right click).&lt;&#x2F;li&gt;
&lt;li&gt;Normalize these coordinates so everything is relative to the DnD sub-window.&lt;&#x2F;li&gt;
&lt;li&gt;(Bonus) Perform keyboard input. This isn‚Äôt needed for the solver, but it will help me with some testing and validation later.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For future posts, I will cover (at least) the following:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Parsing the game state&lt;&#x2F;li&gt;
&lt;li&gt;Solving the game with backtracking&lt;&#x2F;li&gt;
&lt;li&gt;Solving the game with FACTS and LOGIC&lt;&#x2F;li&gt;
&lt;li&gt;Generating my own puzzles (including much larger grid sizes)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;the-game&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;dnd-pt1&#x2F;#the-game&quot;&gt;The Game&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;This game-within-a-game is reaching dangerous levels of niche, so it‚Äôd probably be best to kick things off with a brief introduction to the game‚Äôs rules and mechanics. The game provides the following tutorial (it is nicely animated in game, but I‚Äôve snagged screenshots for your convenience):&lt;&#x2F;p&gt;
&lt;div class=&quot;textCenter&quot; &gt;
  &lt;img src=&quot;..&amp;#x2F;..&amp;#x2F;assets&amp;#x2F;dnd&amp;#x2F;tutorial.png&quot; alt=&quot;Dungeons and Diagrams tutorial&quot; &gt;
  
&lt;&#x2F;div&gt;&lt;!-- - Hark, brave adventurer! In this game you must use logic to complete the dungeon map by placing walls in the correct spaces.
- The number next to each row indicates how many walls it contains. Left click to place walls.
- Every empty space in a map is part of either a treasure room or a hallway. Right click to mark empty spaces.
- Treasure rooms are always 3x3 with a single entrance and a single chest. The chest can be in any of the spaces.
- Every monster is in a dead end. Every dead end contains a monster.
- All empty spaces connect into a single contiguous shape. Diagonal spaces are never considered to be adjacent.
- Hallways are always one space wide. Outside of treasure rooms there will never be a 2x2 block of empty spaces.
- Place all the walls correctly to solve the puzzle and unlock more! --&gt;
&lt;p&gt;If the rules aren‚Äôt totally clear yet, I will elaborate on them in a future post where I implement the solver. For now just know that the player has to place the walls in the grid such that the above constraints are met. Each puzzle has a unique solution which can be derived through repeated application of the rules above. The game also encourages the player to use path markers (the red gems) to help keep track and assist in further deduction. Now, let‚Äôs get started!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;capturing-the-screen&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;dnd-pt1&#x2F;#capturing-the-screen&quot;&gt;Capturing the Screen&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Before we get into parsing the game state and simulating the player, we need a way to capture the pixels of the game and send user input back in response. There are many rust crates to accomplish these tasks, but I have chosen &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nashaofu&#x2F;xcap&quot;&gt;&lt;code&gt;xcap&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; for window queries and screen capture, and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;enigo-rs&#x2F;enigo&quot;&gt;&lt;code&gt;enigo&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (this required installing libxdo as well) for user input. Both of these libraries claim to be cross-platform, so they should work on Windows and Mac as well.&lt;&#x2F;p&gt;
&lt;p&gt;Now, if you looked closely at the image in the &lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;dnd-pt1&#x2F;#introduction&quot;&gt;introduction&lt;&#x2F;a&gt;, you may have noticed that is has a screen distortion effect applied, which would make it difficult to reliably detect colors and positions of image features. It also has 2x pixel scaling, so there is a lot of redundant data in the image. Luckily both of these can be solved by modifying the graphics settings for the game.&lt;&#x2F;p&gt;
&lt;div class=&quot;textCenter&quot; &gt;
  &lt;img src=&quot;..&amp;#x2F;..&amp;#x2F;assets&amp;#x2F;dnd&amp;#x2F;settings.png&quot; alt=&quot;asdf&quot; &gt;
  
&lt;&#x2F;div&gt;
&lt;p&gt;Here I have changed to windowed mode with the smallest resolution, and disabled pixel stretching and the screen effect.&lt;&#x2F;p&gt;
&lt;div class=&quot;textCenter&quot; &gt;
  &lt;img src=&quot;..&amp;#x2F;..&amp;#x2F;assets&amp;#x2F;dnd&amp;#x2F;game_small.png&quot; alt=&quot;asdf&quot; &gt;
  
&lt;&#x2F;div&gt;
&lt;p&gt;The result is a game window with 1:1 pixel sizes and no distortion. The downside is that it makes it a tiny window on my monitor, requiring me to sit pretty close to the screen if I am playing it manually. Luckily, if all goes to plan, the game will soon be playing itself!&lt;&#x2F;p&gt;
&lt;p&gt;Now we can begin with a simple app to find a window by name, and move the mouse to the center of it. For fun let‚Äôs also use a keystroke to open and close the tutorial (F1), send a click, and take a screenshot.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::{thread, time::Duration};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;enigo::{Button, Coordinate, Direction, Enigo, Key, Keyboard, Mouse, Settings};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;xcap::Window;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;GAME_TITLE&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Last Call BBS&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Create an iterator over all the open windows
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; windows = Window::all().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Search for our specific window 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; window = windows
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;win&lt;&#x2F;span&gt;&lt;span&gt;| win.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;() == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;GAME_TITLE&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Initialize enigo input simulator
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; enigo = Enigo::new(&amp;amp;Settings::default()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Move the mouse
&lt;&#x2F;span&gt;&lt;span&gt;    enigo
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;move_mouse&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;() + window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;() + window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            Coordinate::Abs,
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Click
&lt;&#x2F;span&gt;&lt;span&gt;    enigo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;(Button::Left, Direction::Click).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Open and close the tutorial
&lt;&#x2F;span&gt;&lt;span&gt;    enigo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;(Key::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;F1&lt;&#x2F;span&gt;&lt;span&gt;, Direction::Click);
&lt;&#x2F;span&gt;&lt;span&gt;    thread::sleep(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    enigo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;(Key::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;F1&lt;&#x2F;span&gt;&lt;span&gt;, Direction::Click);
&lt;&#x2F;span&gt;&lt;span&gt;    thread::sleep(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Take a screenshot
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; img = window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;capture_image&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    img.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;game.png&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This results in the image below - we placed a wall! I had to add &lt;code&gt;thread::sleep&lt;&#x2F;code&gt; in there otherwise the screenshot would happen faster than the game could process the input. The tutorial window also opens and closes as expected, but I didn‚Äôt capture it in the image. &lt;&#x2F;p&gt;
&lt;div class=&quot;textCenter&quot; &gt;
  &lt;img src=&quot;..&amp;#x2F;..&amp;#x2F;assets&amp;#x2F;dnd&amp;#x2F;clicked.png&quot; alt=&quot;asdf&quot; &gt;
  
&lt;&#x2F;div&gt;
&lt;p&gt;This performs as expected, with a small caveat that it seems to require the mouse to already be above the Last Call BBS window or else the movement and click don‚Äôt register. I believe this is likely a bug with Enigo, but for now I‚Äôll live with the limitation as it‚Äôs pretty minor.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;error-handling&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;dnd-pt1&#x2F;#error-handling&quot;&gt;Error handling&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Let‚Äôs remove those unsightly &lt;code&gt;unwrap&lt;&#x2F;code&gt; calls, and put some proper error handling in place. Almost every action I perform here is falliable. I‚Äôm going to wrap them into a custom &lt;code&gt;InitError&lt;&#x2F;code&gt;, describing things that could go wrong during program initialization. At the same time, I‚Äôm going to wrap this functionality into a new struct &lt;code&gt;DungeonCrawler&lt;&#x2F;code&gt; that will store some persistent data for later use. Lastly, it will be important to know where the Dungeons and Diagrams subwindow is located with respect to the main game window, so I‚Äôll add a function to locate that offset.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;InitError {
&lt;&#x2F;span&gt;&lt;span&gt;    BBSNotFound,                            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Game is not running
&lt;&#x2F;span&gt;&lt;span&gt;    SearchError(SearchError),               &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; DnD sub-window location error
&lt;&#x2F;span&gt;&lt;span&gt;    XCapError(xcap::XCapError),             &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; xcap error wrapper
&lt;&#x2F;span&gt;&lt;span&gt;    EnigoError(enigo::NewConError),         &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; enigo error wrapper
&lt;&#x2F;span&gt;&lt;span&gt;    ImageError(xcap::image::ImageError),    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; image capture error wrapper
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;SearchError {
&lt;&#x2F;span&gt;&lt;span&gt;    NotFound,                               &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; DnD sub-window couldn&amp;#39;t be located
&lt;&#x2F;span&gt;&lt;span&gt;    MultipleResults(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;),                 &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Multiple matches were found for the pattern
&lt;&#x2F;span&gt;&lt;span&gt;    OutOfBounds,                            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Window found, but it is partially out of bounds
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This may not be the perfect way to do error handling in Rust. I am no expert, but I have found this to be a pretty concise and ergonomic way of working with them (in tandem with the &lt;code&gt;?&lt;&#x2F;code&gt; operator). All errors will eventually bubble up to &lt;code&gt;main()&lt;&#x2F;code&gt; where the program will print the error and exit gracefully. Now on to the &lt;code&gt;DungeonCrawler&lt;&#x2F;code&gt; implementation.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;getting-ready-for-parsing&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;dnd-pt1&#x2F;#getting-ready-for-parsing&quot;&gt;Getting Ready for Parsing&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;This is pretty similar to the test application we saw earlier. Notable additions are the call to &lt;code&gt;find_dnd_offset&lt;&#x2F;code&gt; which looks for the DnD window, and a call to &lt;code&gt;img.view()&lt;&#x2F;code&gt; to save a cropped screenshot containing only the DnD window. Saving the images to disk is not really necessary, but it may be useful for debugging in the future so it doesn‚Äôt hurt. At the end of initialization, I also &lt;code&gt;click(0, 0)&lt;&#x2F;code&gt; which forces the window to capture the mouse, working around the caveat I mentioned earlier.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;DungeonCrawler {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;enigo&lt;&#x2F;span&gt;&lt;span&gt;: Enigo,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span&gt;: Window,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;offset&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;DungeonCrawler {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;, InitError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Find &amp;#39;Last Call BBS&amp;#39; window
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; windows = Window::all().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; window = windows
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;win&lt;&#x2F;span&gt;&lt;span&gt;| win.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;() == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;GAME_TITLE&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;ok_or&lt;&#x2F;span&gt;&lt;span&gt;(InitError::BBSNotFound)?
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Capture the screen
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; img = window
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;capture_image&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;| InitError::XCapError(e))?;
&lt;&#x2F;span&gt;&lt;span&gt;        img.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;game.png&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;| InitError::ImageError(e))?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Locate DnD subwindow
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; dnd_offset = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;find_dnd_offset&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;img).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;| InitError::SearchError(e))?;
&lt;&#x2F;span&gt;&lt;span&gt;        img.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(dnd_offset.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, dnd_offset.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;GAME_CROP&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;GAME_CROP&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;to_image&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;dnd.png&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;| InitError::ImageError(e))?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; dc = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            enigo: Enigo::new(&amp;amp;Settings::default()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;| InitError::EnigoError(e))?,
&lt;&#x2F;span&gt;&lt;span&gt;            offset: (
&lt;&#x2F;span&gt;&lt;span&gt;                window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;+ dnd_offset.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;+ dnd_offset.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            ),
&lt;&#x2F;span&gt;&lt;span&gt;            window,
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Force a click to capture the mouse in the application
&lt;&#x2F;span&gt;&lt;span&gt;        dc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;| InitError::MouseCaptureError(e))?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(dc)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To find the location of the DnD window, I spent a bit of time looking for a small pattern of pixels that could be considered unique given the entire rest of the screen. I wanted it to be fast so I kept it to a short pattern of 3 pixels (12 bytes). The pattern is located in the top-left corner of the &lt;code&gt;x&lt;&#x2F;code&gt; button to close the DnD window.&lt;&#x2F;p&gt;
&lt;div class=&quot;textCenter&quot; &gt;
  &lt;img src=&quot;..&amp;#x2F;..&amp;#x2F;assets&amp;#x2F;dnd&amp;#x2F;pattern.png&quot; alt=&quot;asdf&quot; &gt;
  
&lt;&#x2F;div&gt;
&lt;p&gt;In code, I have to also add alpha channel bytes, hence the extra 255‚Äôs. The exact pattern can be seen in the snippet below:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;find_dnd_offset&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Image) -&amp;gt; Result&amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;), SearchError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Pattern of image bytes to uniquely locate the DnD subwindow. The chosen pattern
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; exists at 299,0 relative to the top left corner of the subwindow.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;PATTERN_LEN&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;PATTERN&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;PATTERN_LEN&lt;&#x2F;span&gt;&lt;span&gt;] = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;69&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;52&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;56&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;237&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;169&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;135&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;181&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;147&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;131&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;PATTERN_OFFSET&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;299&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Iterate over sliding window of 12 bytes, considering only every 4th window (pixel alignment)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; matches = image
&lt;&#x2F;span&gt;&lt;span&gt;        .array_windows::&amp;lt;PATTERN_LEN&amp;gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;step_by&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;filter_map&lt;&#x2F;span&gt;&lt;span&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;chunk&lt;&#x2F;span&gt;&lt;span&gt;)| {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; chunk == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;PATTERN &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Given the window index, calculate x and y offsets. Wrapping
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; subtraction here simplifies the bounds check later
&lt;&#x2F;span&gt;&lt;span&gt;                Some((
&lt;&#x2F;span&gt;&lt;span&gt;                    (i as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;% image.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;wrapping_sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;PATTERN_OFFSET&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                    (i as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; image.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;wrapping_sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;PATTERN_OFFSET&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                ))
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                None
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .collect::&amp;lt;Vec&amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;SearchError::*;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; matches.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; Err(NotFound),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(x, y) = matches[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; x &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;625 &lt;&#x2F;span&gt;&lt;span&gt;|| y &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;80 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                Err(OutOfBounds)
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                Ok(matches[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        n =&amp;gt; Err(MultipleResults(n)),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code works by iterating over the image as a sequence of bytes. &lt;code&gt;array_windows::&amp;lt;PATTERN_LEN&amp;gt;&lt;&#x2F;code&gt; gives me an iterator that looks at a sliding window of 12 bytes, and &lt;code&gt;step_by(4)&lt;&#x2F;code&gt; lets me only consider every 4th window, giving me alignment with pixel boundaries. I enumerate these windows so I can later compute the X&#x2F;Y coordinates and filter the windows based on whether or not any given sequence of 12 bytes matches my pattern. The result is mapped into a simple list of (x, y) tuples. &lt;&#x2F;p&gt;
&lt;p&gt;As I was experimenting with patterns, it was not uncommon to find multiple matches, so I explicitly handle that case and consider it to be an error. Additionally, it is possible to locate the window offset but calculate that it must not be fully visible on screen, so I also handle &lt;code&gt;OutOfBounds&lt;&#x2F;code&gt; as another failure case.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, I can rewrite &lt;code&gt;main&lt;&#x2F;code&gt; to create an instance of &lt;code&gt;DungeonCrawler&lt;&#x2F;code&gt; which should compute the global offset from the top left corner of my monitor to the top left corner of the DnD window &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; dc = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;DungeonCrawler::new() {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(d) =&amp;gt; d,
&lt;&#x2F;span&gt;&lt;span&gt;        Err(e) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            eprintln!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;{:#?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e);
&lt;&#x2F;span&gt;&lt;span&gt;            std::process::exit(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;offset: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, dc.offset);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Sure enough, running this produces the following output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;color:#abb2bf;&quot;&gt;&lt;code&gt;&lt;span&gt;offset: (284, 126)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which we can manually verify in the following image. I‚Äôve painted a single red pixel in the top left corner of the DnD window with some helpful arrows because a single pixel may be hard to spot. It actually sits a bit outside of the actual window because the top left corner is beveled. I used GIMP to check the pixel coordinate, but feel free to count it yourself!&lt;&#x2F;p&gt;
&lt;div class=&quot;textCenter&quot; &gt;
  &lt;img src=&quot;..&amp;#x2F;..&amp;#x2F;assets&amp;#x2F;dnd&amp;#x2F;offset.png&quot; alt=&quot;asdf&quot; &gt;
  
&lt;&#x2F;div&gt;
&lt;p&gt;From this point on, I can use this offset to normalize my coordinates to the DnD window. I don‚Äôt care where the game client is located on my monitor, and I don‚Äôt care where the DnD window is located within the game client.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;speedtest&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;dnd-pt1&#x2F;#speedtest&quot;&gt;Speedtest&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;With the DnD window offset calculated, I can now put a test together to see how quickly I can click all the squares. A good starting benchmark would be to fill in all the grid cells in under a second. With 64 cells to click (ignoring monsters and treasure for now), that gives me an upper bound of ~15.6 milliseconds per click. I am worried that if I click too fast, the game won‚Äôt keep up and the game state will get out of sync with my program. To test the reliability of the speed, I will set a click delay and loop over all the tiles a few times, seeing if any clicks are missed. Once I find the speed where clicks are dropped, I can back it off with a safe margin and then hope for the best!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;CLICK_DELAY&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;DungeonCrawler {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; constructor hidden for brevity
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;, InitError&amp;gt; { ... }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; InputResult&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cx = (x + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.offset.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cy = (y + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.offset.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.enigo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;move_mouse&lt;&#x2F;span&gt;&lt;span&gt;(cx, cy, Coordinate::Abs)?;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.enigo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;(Button::Left, Direction::Click)?;
&lt;&#x2F;span&gt;&lt;span&gt;        thread::sleep(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;CLICK_DELAY&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And the loop to perform the clicks:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; added to main()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; repeat 5 times
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;_ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; j in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cx = i * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;33 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;66&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cy = j * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;33 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;191&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                dc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span&gt;(cx, cy).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And now for the results. Drumroll please!&lt;&#x2F;p&gt;
&lt;center&gt;
    &lt;video class=&quot;
    
    
    
    textCenter
  &quot; alt=&quot;asdf&quot;  autoplay loop src=&quot;..&amp;#x2F;..&amp;#x2F;assets&amp;#x2F;dnd&amp;#x2F;clicktest.webm&quot;&gt;
    &lt;&#x2F;video&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Well, it would appear that 10ms is a bit too fast.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Automating Dungeons and Diagrams Part 2: Parsing the Game State</title>
        <published>2024-06-18T00:00:00+00:00</published>
        <updated>2024-06-18T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://anemone.pages.dev/blog/dnd-pt2/" type="text/html"/>
        <id>https://anemone.pages.dev/blog/dnd-pt2/</id>
        
        <content type="html">&lt;h1 id=&quot;introduction&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;dnd-pt2&#x2F;#introduction&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Last time I laid the foundation for game state parsing, namely reading pixels from the screen and normalizing the coordinate system so we don‚Äôt have to worry about the rest of the screen outside the DnD window. Today I‚Äôd like to go from a screenshot to a representation that I can use in Rust. With that said, my objectives for today are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Detect tile contents (Empty, Treasure, or Monster)&lt;&#x2F;li&gt;
&lt;li&gt;Parse the numbers on the top and left side of the board&lt;&#x2F;li&gt;
&lt;li&gt;Parse the room seed&lt;&#x2F;li&gt;
&lt;li&gt;Read and write the board state to a file&lt;&#x2F;li&gt;
&lt;li&gt;(Bonus) Create a catologue of puzzles that I can use for offline testing&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;the-game-state&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;dnd-pt2&#x2F;#The-game-state&quot;&gt;The Game State&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;The critical pieces of information we need from the game are the numbers along the top and left edges of the board, and the positions of monsters and treasure chests. For now I will operate under the assumption that the player hasn‚Äôt placed any walls or path markers yet (they could have been placed incorrectly and it will throw off the solver), so tiles can only be in one of the following states - &lt;code&gt;Monster&lt;&#x2F;code&gt;, &lt;code&gt;Treasure&lt;&#x2F;code&gt;, or &lt;code&gt;Empty&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Reading the state of the board can be done in two ways. The direct approach is to attach a debugger to the process and scan its memory for the relevant data. I have done this before with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;cheatengine.org&#x2F;&quot;&gt;Cheat Engine&lt;&#x2F;a&gt; and it could probably be done with a simple process memory dump as well. I may return to this idea in the future, but for now I will use the other method of capturing a screenshot of the running game and observing the pixel values in order to deduce the information I need. &lt;&#x2F;p&gt;
&lt;p&gt;If you looked closely at the image in the &lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;dnd-pt2&#x2F;#introduction&quot;&gt;introduction&lt;&#x2F;a&gt;, you may have noticed that is has a screen distortion effect applied, which would make it difficult to reliably detect colors and positions of image features. It also has 2x pixel scaling, so there is a lot of redundant data in the image. Luckily both of these can be solved by modifying the graphics settings for the game.&lt;&#x2F;p&gt;
&lt;div class=&quot;textCenter&quot; &gt;
  &lt;img src=&quot;..&amp;#x2F;..&amp;#x2F;assets&amp;#x2F;dnd&amp;#x2F;settings.png&quot; alt=&quot;asdf&quot; &gt;
  
&lt;&#x2F;div&gt;
&lt;p&gt;Here I have changed to windowed mode with the smallest resolution, and disabled pixel stretching and the screen effect.&lt;&#x2F;p&gt;
&lt;div class=&quot;textCenter&quot; &gt;
  &lt;img src=&quot;..&amp;#x2F;..&amp;#x2F;assets&amp;#x2F;dnd&amp;#x2F;game_small.png&quot; alt=&quot;asdf&quot; &gt;
  
&lt;&#x2F;div&gt;
&lt;p&gt;The result is a game window with 1:1 pixel sizes and no distortion. The downside is that it makes it a tiny window on my monitor, requiring me to sit pretty close to the screen if I am playing it manually. Luckily, if all goes to plan, the game will soon be playing itself!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;let-s-start-coding&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;dnd-pt2&#x2F;#lets-start-coding&quot;&gt;Let‚Äôs start coding&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Very quickly before I get into the code, I‚Äôll highlight a few objectives for this post. I need a program which can do the following:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Find a window on the deskop given it‚Äôs title, in this case ‚ÄúLast Call BBS‚Äù.&lt;&#x2F;li&gt;
&lt;li&gt;Capture the framebuffer for that window, and peek into the pixel values.&lt;&#x2F;li&gt;
&lt;li&gt;Move the mouse to specific coordinates relative to the window, and perform mouse input (left and right click)&lt;&#x2F;li&gt;
&lt;li&gt;(Bonus) Perform keyboard input. This isn‚Äôt needed for the solver, but it will help me with some testing and validation later.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I originally started implementing this functionality using libX11 directly, but it was neither fun nor straightforward. Instead I‚Äôve decided to delgate window identification and screenshot functionality to the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nashaofu&#x2F;xcap&quot;&gt;&lt;code&gt;xcap&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate, and mouse and keyboard input will be performed with &lt;code&gt;enigo&lt;&#x2F;code&gt; (requires &lt;code&gt;libxdo-dev&lt;&#x2F;code&gt; to be installed). Both of these crates claim to have cross-platform support.&lt;&#x2F;p&gt;
&lt;p&gt;Let‚Äôs start with a simple app to find a window by name, and move the mouse to the center of it. For fun let‚Äôs also send a click and then take a screenshot.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::{thread, time::Duration};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;enigo::{Button, Coordinate, Direction, Enigo, Mouse, Settings};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;xcap::Window;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;GAME_TITLE&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Last Call BBS&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Create an iterator over all the open windows
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; windows = Window::all().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Search for our specific window 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; window = windows
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;win&lt;&#x2F;span&gt;&lt;span&gt;| win.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;() == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;GAME_TITLE&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Initialize enigo input simulator
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; enigo = Enigo::new(&amp;amp;Settings::default()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Move the mouse
&lt;&#x2F;span&gt;&lt;span&gt;    enigo
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;move_mouse&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;() + window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;() + window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            Coordinate::Abs,
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Click
&lt;&#x2F;span&gt;&lt;span&gt;    enigo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;(Button::Left, Direction::Click).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    thread::sleep(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Take a screenshot
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; img = window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;capture_image&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    img.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;game.png&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This results in the image below - we placed a wall! I had to add &lt;code&gt;thread::sleep&lt;&#x2F;code&gt; in there otherwise the screenshot would happen faster than the game could process the input.&lt;&#x2F;p&gt;
&lt;div class=&quot;textCenter&quot; &gt;
  &lt;img src=&quot;..&amp;#x2F;..&amp;#x2F;assets&amp;#x2F;dnd&amp;#x2F;clicked.png&quot; alt=&quot;asdf&quot; &gt;
  
&lt;&#x2F;div&gt;
&lt;p&gt;This performs as expected, with a small caveat that it seems to require the mouse to already be above the Last Call BBS window or else the movement and click don‚Äôt register. I believe this is likely a bug with Enigo, but for now I‚Äôll live with the limitation as it‚Äôs pretty minor.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Just Clear All (Part 1)</title>
        <published>2024-02-26T00:00:00+00:00</published>
        <updated>2024-02-26T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://anemone.pages.dev/blog/incomplete/just-clear-all/" type="text/html"/>
        <id>https://anemone.pages.dev/blog/incomplete/just-clear-all/</id>
        
        <content type="html">&lt;h1 id=&quot;introduction&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;incomplete&#x2F;just-clear-all&#x2F;#introduction&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Just Clear All&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; is a puzzle game release for mobile devices by Veewo in 2015. The rules are quite simple but it lends itself to some emergent complexity that makes it difficult or impossible to complete the game without guessing. Clicking on a number will collapse it and all the contiguous same-number tiles into a new single tile with the value incremented by 1. After the old tiles are deleted, all the blocks settle downwards as if by gravity, and any empty columns are also shuffled to the right. The player gains points through each move and earns large amounts of bonus points based on how many tiles have been removed by the time you have no more valid moves available. &lt;&#x2F;p&gt;
&lt;p&gt;I thought it would be fun to solve computationally, and in 2015 I did just that with a crude Python script. It was extremely slow and struggled to run to completion for all but the simplest of puzzle inputs, but it ‚Äúworked‚Äù. I am now revisiting this puzzle with a few more years of experience under my belt, and the performance of a proper systems language (Rust). With this blog post, I intend to come up with a naive solution and find out how much profiling and optimization is needed. Subsequent efforts will follow in future blog posts.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;reading-the-game-state&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;incomplete&#x2F;just-clear-all&#x2F;#game-state&quot;&gt;Reading the game state&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;The first step in solving any puzzle programatically is to find a way represent the game state in your program. Since the game takes the shape of an 8x8 grid of small numbers, I have chosen a 2d array of bytes. In my original Python solution, I initially captured the game state by starting a game on my phone, and manually typing the numbers into an array in the script. I‚Äôm sure you‚Äôll believe me when I say this got old very quickly. I figured I could probably just use the Python Imaging Library to look at the pixels RGB values and make a pretty good guess of the digit, but upon closer inspection I noticed there was some subtle variation in the colors which put me off of that method temporarily.&lt;&#x2F;p&gt;
&lt;p&gt;You might be asking yourself something like: ‚ÄúWhy don‚Äôt you just randomly generate numbers for each cell between some lower and upper bound?‚Äù. Well, I did try this, but I found the distribution of the numbers didn‚Äôt quite ‚Äúfeel‚Äù the same as what was presented in the game. It created a large number of small islands rather than what I percieved in the game to be a small number of medium-large islands.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-old-way&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;incomplete&#x2F;just-clear-all&#x2F;#the-old-way&quot;&gt;The old way&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;It is a common problem for inexperienced programmers to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Anchoring_effect&quot;&gt;anchor&lt;&#x2F;a&gt; to the first solution they think of and assume it is the only way to do something. At the time I was no exception. In a moment of youthful enthusiasm, I came up with a truly bizarre and convoluted solution which I will briefly describe here for comedic effect. My original solution was:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Using the Android Debug Bridge (ADB), programatically capture a screenshot of the game&lt;&#x2F;li&gt;
&lt;li&gt;Transfer the image to my computer&lt;&#x2F;li&gt;
&lt;li&gt;Open the image and crop the individual tiles into sub-images.&lt;&#x2F;li&gt;
&lt;li&gt;Send those images to an optical character recognition service hosted on Google cloud (not a joke)&lt;&#x2F;li&gt;
&lt;li&gt;Retrieve and parse the json response into a 2d array array of numbers&lt;&#x2F;li&gt;
&lt;li&gt;Print the numbers to the terminal so I could manually verify the accuracy of the OCR service&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Seriously, in hindsight I think I deserve some kind of award for the sheer stubbornness required to make a processes like that work. Eventually I ran out of free Google cloud credits and had to find a different solution. Reconsidering my hasty decision to not use the RGB values, I realized I could truncate the lower bits of each color channel to eliminate the subtle variance I was observing. Taking only the upper 4 bits of each channel of each color, I was able to construct a simple mapping which could be used to quickly parse the board.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;colors = {
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;11
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This method completely eliminated any parsing errors that I was having from using OCR, and I was considering using the same method for my Rust version, until another thought crossed my mind‚Ä¶&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-new-way&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;incomplete&#x2F;just-clear-all&#x2F;#the-new-way&quot;&gt;The new way&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Since the app is no longer available on the Android Play Store, I resorted to pulling the .apk file from an online repository and side-loaded it onto my phone. The game is a bit glitchy (it targets Android version 3!), but generally works and issues can be fixed by restarting the app. I wondered though, if I had access to the .apk, surely I should be able to poke around inside it and find out how the level generation is done. If I could figure that out, I could simply generate puzzles on demand, without even needing to run the app!&lt;&#x2F;p&gt;
&lt;p&gt;I searched online for ‚Äú.apk disassembly tools‚Äù and found the bespoke &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;apktool.org&#x2F;&quot;&gt;&lt;code&gt;apktool&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. After using this to extract the .apk file, I was pleasantly suprised to find the entire source code of the game in front of my eyes. After an hour or so of wading through the source code, I was able to completely recreate the puzzle generation in Rust, without the need to launch the app or look at any pixels. This is a seriously good starting point, as I can now quickly generate millions of puzzles which I can use to analyze solutions statistically. I won‚Äôt show the code as I believe there may be some copyright issues since it is based on the closed source of a commercial project, but I can describe it.&lt;&#x2F;p&gt;
&lt;p&gt;The ‚Äújust generate random numbers!‚Äù solution I mentioned above actually wasn‚Äôt too far off, and the clever reader may have taken it a step further to suggest ‚Äúmaybe instead of uniform random, we should use weighted random‚Äù. This is the key that makes all the difference. In the source code I found the weights and replicated them in my own program. I generate 64 weighted random numbers, and then manually override a random tile with a ‚Äúheavy‚Äù block. Each puzzle has one of these which is higher-valued than all the other tiles.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;solving-the-puzzle&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;incomplete&#x2F;just-clear-all&#x2F;#solving-the-puzzle&quot;&gt;Solving the puzzle&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Let‚Äôs start by quickly setting the stage - what do I mean by ‚Äúsolve‚Äù the puzzle? In the context of the game, the only objective is to earn the most points. A fun side goal is to collapse all the numbers into a single remaining tile. Generally speaking, reducing all the tiles to a single one will also generate a high amount of points, but it won‚Äôt necessarily be the MOST points. For my solver, I am strictly concerned with getting the most points, disregarding the number of remaining tiles.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;scoring&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;incomplete&#x2F;just-clear-all&#x2F;#scoring&quot;&gt;Scoring&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The score for a game is the sum of the scores for each move, plus a bonus at the end for the number of tiles cleared. Each move is scored as follows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;color:#abb2bf;&quot;&gt;&lt;code&gt;&lt;span&gt;multiplier = 1 + floor(number &#x2F; 5)
&lt;&#x2F;span&gt;&lt;span&gt;move_score = island_size * number * 5 * multiplier
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This shows that it is more rewarding to set up large islands rather than collapsing a bunch of small ones. The end-of-round bonus is calculated as follows (where &lt;code&gt;num_tiles&lt;&#x2F;code&gt; represents the number of tiles remaining when there are no more moves left):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;color:#abb2bf;&quot;&gt;&lt;code&gt;&lt;span&gt;bonus = [500, 250, 200, 150, 100, 50][num_tiles - 1] * (level + 1)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we assume the number of remaining tiles is 6 or fewer. If the count of remaining tiles is higher than 6, no bonus is awarded for that level.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;making-a-move&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;incomplete&#x2F;just-clear-all&#x2F;#making-a-move&quot;&gt;Making a move&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A single move in the game involves selecting any of the non-empty tiles remaining which has an island size of 2 or more. Tapping that tile will initiate a collapse, increment, and add some points to your score. Implementing this in code requires us to do the following steps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Compute the set of tiles within the island we selected (via floodfill)&lt;&#x2F;li&gt;
&lt;li&gt;Zero-out all tiles in that island except the one we selected&lt;&#x2F;li&gt;
&lt;li&gt;Increment the final tile&lt;&#x2F;li&gt;
&lt;li&gt;Collapse the board to remove gaps&lt;&#x2F;li&gt;
&lt;li&gt;Update our score&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After all of that, we will be left with a new game state which we can recursively make moves on, thus performing a depth-first search through the game tree, not unlike a chess engine. After each move, we can check if the score is higher than our current best, and if so output a message to the console. This way we will have realtime feedback on the best-so-far solution and its score. If the program runs to completion, it will have exhaustively searched all possible sequences of moves and the output will be globally optimal. Until then, however, we may be left with only a good-but-not-perfect solution.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;profiling&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;incomplete&#x2F;just-clear-all&#x2F;#profiling&quot;&gt;Profiling&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;low-hanging-fruit&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;anemone.pages.dev&#x2F;blog&#x2F;incomplete&#x2F;just-clear-all&#x2F;#low-hanging-fruit&quot;&gt;Low-hanging Fruit&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
</content>
        
    </entry>
</feed>
